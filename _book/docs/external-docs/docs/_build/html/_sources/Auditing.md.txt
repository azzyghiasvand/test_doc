# Auditing

All data and metadata requests are audited. All of these audit logs are generated by the
planner service. There may be additional audit logs by higher level services, such as the
REST server and web UI but requests to get data or metadata will eventually go through
the planner.

Each user request generates one audit entry in the planner service log. These logs are
periodically uploaded to S3 in the cluster's install location.

## Audit log format

Each audit log is a json record with this schema. These fields are considered stable and
will not be removed in future releases. It is expected that more fields may be added in
the future. Note there may be additional fields that are not documented here, those are
not considered stable and may be removed.

**request_time** (string): Human formatted time (in GMT) when the request started.

**start_unix_time** (int64): time in ms since unix epoch the audit entry was generated.
This is also the same as when the request completed (or failed).

**end_unix_time** (int64): time in ms since unix epoch the audit entry was generated.
This is also the same as when the request completed (or failed).

**request_id** (string): Unique ID for this request.

**auth_failure** (boolean): Set to true if the request failed due to authorization or
authentication failure.

**status** (string): Status message of the request. "ok" if the request succeeded; error
details otherwise.

**user** (string): The effective user running the request. This is the user whose access
permissions are used to validate the request.

**connected_user** (string): The user that is authenticated at the network connection
level. This can be different than `user` if the connected user is running on behalf of
another user.

**client_network_address** (string): The client host and port.

**statement_type** (string): The type of the request.

**statement** (string): Log of the request. Depending on the statement type, this will
vary in format but captures the request being made.

## Service logs

The audit logs are prefixed in the service log with `Audit.log`, on a single line. For
example, the service log with 3 entries may look like:

```
proc stderr: I1114 16:00:32.785622   127] Audit.log: {"request_time":"2017-11-14 16:00:32.444431000","request_id":"5c4ea821bc255858:5c402db736b49f93","start_unix_time":1510675232444,"end_unix_time":1510704032785,"auth_failure":false,"status":"ok","user":"root","connected_user":"root","client_network_address":"127.0.0.1:48024","client_application":"execute-ddl","statement_type":"DDL","default_db":"default","statement":"CREATE DATABASE IF NOT EXISTS cerebro_sample;"}
proc stderr: I1114 16:00:33.601177   128] Audit.log: {"request_time":"2017-11-14 16:00:32.801185000","request_id":"749a2d993fd0f15:dec37270e0b477bd","start_unix_time":1510675232801,"end_unix_time":1510704033601,"auth_failure":false,"status":"ok","user":"root","connected_user":"root","client_network_address":"127.0.0.1:48026","client_application":"execute-ddl","statement_type":"DDL","default_db":"default","statement":"CREATE EXTERNAL TABLE IF NOT EXISTS cerebro_sample.sample(record STRING)   LOCATION 'file:///opt/data/sample';"}
proc stderr: I1114 16:00:33.658776   129] Audit.log: {"request_time":"2017-11-14 16:00:33.615871000","request_id":"9b4e49b3d3542e6a:c48ba960358f918f","start_unix_time":1510675233615,"end_unix_time":1510704033658,"auth_failure":false,"status":"ok","user":"root","connected_user":"root","client_network_address":"127.0.0.1:48028","client_application":"execute-ddl","statement_type":"DDL","default_db":"default","statement":"CREATE EXTERNAL TABLE IF NOT EXISTS cerebro_sample.users(     uid STRING,     dob STRING,     gender STRING,     ccn STRING)   STORED AS PARQUET LOCATION 'file:///opt/data/users';"}
```